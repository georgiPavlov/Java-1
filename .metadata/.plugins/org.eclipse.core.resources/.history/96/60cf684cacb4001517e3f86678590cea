package Wednesday;

public class BST<T extends Comparable<T>> {
	private class Node implements Comparable<Node> {
		public T value;
		public int depth;
		public int height;
		public Node left;
		public Node right;
		public Node parent;

		Node(T val) {
			this.value = val;
			this.depth = 0;
			this.height = 0;
			this.left = null;
			this.right = null;
			this.parent = null;
		}

		@Override
		public int compareTo(BST<T>.Node other) {
			return this.value.compareTo(other.value);
		}
	};

	private Node root;

	BST() {
		root = null;
	}

	public void add(T element) {
		if (root == null) {
			root = new Node(element);
			root.height = 0;
			root.depth = 0;
		} else {
			addTo(new Node(element), root);
		}
	}
	
	public void remove(T element) {
		Node curr = root;
		while(curr != null) {
			if (curr.value.equals(element)) {
				removeNode(curr);
			} else {
				if (curr.value.compareTo(element) == 1) {
					curr = curr.left;
				} else {
					curr = curr.right;
				}
			}
			
		}
	}
	
	private void removeNode(Node deleted) {
		Node swap = findSwap(deleted);
		Node heightUpdater;
		if (swap == null) {
			heightUpdater = deleted.parent;
		}
	}
	
	private void addTo(Node newNode, Node parent) {
		if (parent.compareTo(newNode) == -1) {
			if (parent.right == null) {
				parent.right = newNode;
				newNode.parent = parent;
				newNode.depth = parent.depth + 1;
				updateHeight(newNode);
			} else {
				addTo(newNode, parent.right);
			}
		}
		else {
			if (parent.left == null) {
				parent.left = newNode;
				newNode.parent = parent;
				newNode.depth = parent.depth + 1;
				updateHeight(newNode);
			} else {
				addTo(newNode, parent.left);
			}
		}
	}
	
	private void updateHeight(Node current) {
		if (current.parent != null) {
			if (current.parent.left == null || current.parent.right == null) {
				current.parent.height = current.height + 1;
			} else {
				int lh = current.parent.left.height;
				int rh = current.parent.right.height;
				current.parent.height = Math.max(lh, rh) + 1;
			}
			updateHeight(current.parent);
		}
	}
	
	private Node findSwap(Node deleted) {
		Node curr = deleted.left;
		if (curr == null) {
			return deleted.right;
		} else {
			while(curr.right != null) {
				curr = curr.right;
			}
			return findSwap(curr);
		}
	}
	
}
